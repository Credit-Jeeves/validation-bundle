[set parameters]
file="app/config/parameters.yml"
file2="app/config/parameters_dev.yml"
@description="Config %%FILE%% must be edentical to %%FILE2%%"
@class=Hat\Environment\Tester\FilesIdentical
@on.fail=builder/parameters.ini

[composer install]
@class=Hat\Environment\Tester\Pass
@on.pass=builder/install.ini

; Checks

[php version exclude]
command=php -v
version=5.3.16
@class=Hat\Environment\Tester\CommandVersionExclude
@description="PHP version must not be %%VERSION%% as Symfony 2 will not work properly with it"

[mysql installed]
command=mysql
@class=Hat\Environment\Tester\CommandExists
@description="MySQL must be installed"

[mysql version]
command=mysql --version
version=5.5
@class=Hat\Environment\Tester\CommandVersion
@description="MySQL version must be at least %%VERSION%%"

[mysql is working]
process=mysqld
@class=Hat\Environment\Tester\Process
@description="MySQL is working"

[php-fpm is working]
process=php-fpm
@class=Hat\Environment\Tester\Process
@description="NGNIX is working as a process '%%PROCESS%%'"

[php-fpm is working on port]
port=80
ip=127.0.0.1
@class=Hat\Environment\Tester\Socket
@description="NGNIX is working on %%IP%%:%%PORT%%"

[php-fpm answer on request]
port=80
ip=127.0.0.1
request="GET / HTTP/1.1\r\nHost: localhost\r\nConnection: Close\r\n\r\n"
response=nginx
@class=Hat\Environment\Tester\Socket
@description="NGNIX answer on request to %%IP%%:%%PORT%%"

[pdo installed]
class=PDO
@class=Hat\Environment\Tester\PhpClassExists
@description="PDO must be installed"

[current dir is writable]
path=.
@class=Hat\Environment\Tester\IsWritable
@description="Current dir must be writable"

[short_open_tag]
option=short_open_tag
expected=
@class=Hat\Environment\Tester\PhpIni
@description="short_open_tag should be disabled in php.ini"

[date.timezone setting must be set]
option=date.timezone
regex=/.+/i
@class=Hat\Environment\Tester\PhpIni

[setfacl installed]
command=setfacl
@class=Hat\Environment\Tester\CommandExists
@description="setfacl must be installed"

[getfacl installed]
command=getfacl
@class=Hat\Environment\Tester\CommandExists
@description="setfacl must be installed"


; BUILDS

[check cache permissions]
command=getfacl app/cache
user=nginx
regex="/default:user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/permissions.ini
@doc="doc/acl_redhat.txt"

[check logs permissions]
command=getfacl app/logs
user=nginx
regex="/default:user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/permissions.ini
@doc="doc/acl_redhat.txt"

[check insttalation version]
contains=1
file=data/installation
@class=Hat\Environment\Tester\FileContains
@on.fail=builder/installation.ini

[check installation of CreditJeevesSf1]
@class=Hat\Environment\Tester\Pass
@description="CreditJeevesSf1 must be installed"
@on.pass=builder/sf1.ini

[cache clear prod]
command="php bin cache:clear --env=prod"
@class=Hat\Environment\Builder\ExecuteCommand

[cache clear dev]
command="php bin cache:clear --env=dev"
@class=Hat\Environment\Builder\ExecuteCommand
