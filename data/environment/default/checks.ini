[clear cache]
path="app/cache/"
exclude=".sf"
@class=Hat\Environment\Builder\Delete

[create web directory]
command="test -d web || mkdir -p web"
@class=Hat\Environment\Builder\ExecuteCommand

[copy web directory]
command="cp -r -f data/files/web/* web/"
@class=Hat\Environment\Builder\ExecuteCommand

[clear web xmls]
path="web/uploads/logs/xml/"
exclude=".gitkeep"
@class=Hat\Environment\Builder\Delete

[clear web uploads js]
path="web/uploads/js/"
exclude=".gitkeep"
@class=Hat\Environment\Builder\Delete

[check cache permissions]
command=getfacl app/cache
user=nginx
regex="/default:user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/permissions.ini
@doc="doc/acl_redhat.txt"

[check logs permissions]
command=getfacl app/logs
user=nginx
regex="/default:user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/permissions.ini
@doc="doc/acl_redhat.txt"

[check web-js permissions]
command=getfacl web/js
user=nginx
regex="/user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/web_permissions.ini

[check web-css permissions]
command=getfacl web/css
user=nginx
regex="/user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/web_permissions.ini

[check web-uploads-js permissions]
command=getfacl web/uploads/js
user=nginx
regex="/user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/web_permissions.ini

[check web-uploads-screenshot permissions]
command=getfacl web/uploads/logs/screenshot
user=nginx
regex="/user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/web_permissions.ini

[check web-uploads-xml permissions]
command=getfacl web/uploads/logs/xml
user=nginx
regex="/user:%%USER%%:rwx/"
@class=Hat\Environment\Tester\CommandOutput
@on.fail=builder/web_permissions.ini

[clear web js]
path="web/js/"
exclude=".gitkeep"
@class=Hat\Environment\Builder\Delete

[clear web css]
path="web/css/"
exclude=".gitkeep"
@class=Hat\Environment\Builder\Delete

[set parameters]
file="app/config/parameters.yml"
file2="app/config/parameters_prod.yml"
@description="Config %%FILE%% must be identical to %%FILE2%%"
@class=Hat\Environment\Tester\FilesIdentical
@on.fail=builder/parameters.ini

[composer install]
@class=Hat\Environment\Tester\Pass
@on.pass=builder/install.ini

; Checks

[mysql installed]
command=mysql
@class=Hat\Environment\Tester\CommandExists
@description="MySQL must be installed"

[mysql version]
command=mysql --version
version=5.1
@class=Hat\Environment\Tester\CommandVersion
@description="MySQL version must be at least %%VERSION%%"
@depends=mysql installed

[mysql is working]
process=mysqld
@class=Hat\Environment\Tester\Process
@description="MySQL is working"
@depends=mysql version

[pdo installed]
class=PDO
@class=Hat\Environment\Tester\PhpClassExists
@description="PDO must be installed"

[php-fpm is working]
process=php-fpm
@class=Hat\Environment\Tester\Process
@description="NGNIX is working as a process '%%PROCESS%%'"

[php-fpm is working on port]
port=80
ip=127.0.0.1
@class=Hat\Environment\Tester\Socket
@description="NGNIX is working on %%IP%%:%%PORT%%"

[php-fpm answer on request]
port=80
ip=127.0.0.1
request="GET / HTTP/1.1\r\nHost: localhost\r\nConnection: Close\r\n\r\n"
response=nginx
@class=Hat\Environment\Tester\Socket
@description="NGNIX answer on request to %%IP%%:%%PORT%%"

[current dir is writable]
path=.
@class=Hat\Environment\Tester\IsWritable
@description="Current dir must be writable"

[date.timezone setting must be set]
option=date.timezone
regex=/.+/i
@class=Hat\Environment\Tester\PhpIni

[post max input vars]
option=max_input_vars
regex=/3000/
@class=Hat\Environment\Tester\PhpIni
@description="Max input vars parameter should be not less than %%REGEX%%"

[apc enabled]
option=apc.enabled
regex=/1/
@class=Hat\Environment\Tester\PhpIni
@description="APC should be enabled"

[setfacl installed]
command=setfacl
@class=Hat\Environment\Tester\CommandExists
@description="setfacl must be installed"

[getfacl installed]
command=getfacl
@class=Hat\Environment\Tester\CommandExists
@description="getfacl must be installed"

; BUILDS

[check installation version]
contains=12
file=data/installation
@class=Hat\Environment\Tester\FileContains
@on.fail=builder/installation.ini

[check build db]
@class=Hat\Environment\Tester\Pass
@description="DB must be built"
@on.pass=builder/db.ini

[check migration]
@class=Hat\Environment\Tester\Pass
@description="DB must be migrated"
@on.pass=builder/migration.ini

[clear cache]
path="app/cache/"
exclude=".sf"
@class=Hat\Environment\Builder\Delete

[install assets for cj]
command="php bin/console --app=cj assets:install --symlink --relative"
@class=Hat\Environment\Builder\ExecuteCommand

[install assets for rj]
command="php bin/console --app=rj assets:install --symlink --relative"
@class=Hat\Environment\Builder\ExecuteCommand

[install assetic cj]
command="php bin/console.php assetic:dump --app=cj --no-debug --env=prod"
@class=Hat\Environment\Builder\ExecuteCommand

[install assetic rj]
command="php bin/console.php assetic:dump --app=rj --no-debug --env=prod"
@class=Hat\Environment\Builder\ExecuteCommand

[install routs for cj]
command="php app/console fos:js-routing:dump --app=cj --env=prod --target=web/bundles/fosjsrouting/js/cj_prod.js"
@class=Hat\Environment\Builder\ExecuteCommand

[install routs for rj]
command="php app/console fos:js-routing:dump --app=rj --env=prod --target=web/bundles/fosjsrouting/js/rj_prod.js"
@class=Hat\Environment\Builder\ExecuteCommand
